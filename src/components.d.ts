/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface OjpAccordion {
        /**
          * Allow multiple items to be open at once If set to false, opening one item will auto-close all other items in the accordion Type: boolean
         */
        "allowMultipleItemsOpen": boolean;
        /**
          * Expand/Collapse all accordion items
         */
        "toggleAll": () => Promise<void>;
    }
    interface OjpAccordionItem {
        /**
          * Optional User-defined anchor id Used so item can be auto-opened with url param Type: string
         */
        "anchorId": any;
        /**
          * Close the accordion item
         */
        "closeItem": () => Promise<void>;
        /**
          * Index of accordion item from top to bottom Type: number
         */
        "index": number;
        /**
          * Accordion item is open or opening (css transition) Type: boolean
         */
        "open": boolean;
        /**
          * Open the accordion item
         */
        "openItem": () => Promise<void>;
        /**
          * Toggle the accordion item
         */
        "toggleItem": () => Promise<void>;
    }
    interface OjpCol {
        "dspan": any;
        "dstart": any;
        "mspan": any;
        "mstart": any;
        "span": string;
        "start": string;
        "tspan": any;
        "tstart": any;
    }
    interface OjpImage {
        /**
          * Image alt text Type: string Default: ""
         */
        "alt": string;
        /**
          * Image focus/object position Type: see CSS object-position https://developer.mozilla.org/en-US/docs/Web/CSS/object-position Default: null
         */
        "imageFocus": string;
        /**
          * Loading type (using browser's native lazy loading) Type: boolean Default: true
         */
        "lazy": string;
        /**
          * Image aspect ratio Type: see CSS aspect-ratio https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio Default: null
         */
        "ratio": string;
        /**
          * Source tags Type: string array of objects Default: [] Example: sources='[           {             "media":"(max-width: 599px)",             "srcset":"../../assets/small_700x600.png"           },           {             "media":"(min-width: 600px) and (max-width: 1000px)",             "srcset":"../../assets/medium_1000x400.png"           }         ]'
         */
        "sources": string;
        /**
          * Image src Type: string Required: true Default: null
         */
        "src": string;
    }
    interface OjpImageSource {
        /**
          * Media query Type: string Example: "(min-width: 600px)"
         */
        "media": string;
        /**
          * Image src Type: string Example: https://www.example.com/image.jpg
         */
        "srcset": string;
    }
    interface OjpListbox {
        "activeSelectionIndex": number;
        "onItemSelected": Function;
        "open": boolean;
    }
    interface OjpModal {
        "closeModal": () => Promise<void>;
        /**
          * Modal's close button is inside or outside the modal panel Type: boolean
         */
        "closebuttonoutside": boolean;
        /**
          * Modal is open or opening (css transition) Type: boolean
         */
        "open": boolean;
        /**
          * Methods to open, close modal
         */
        "openModal": () => Promise<void>;
    }
    interface OjpRow {
        "align": string;
        "cols": string;
        "dcols": any;
        "fullbleed": boolean;
        "justify": string;
        "mcols": any;
        "tcols": any;
    }
}
declare global {
    interface HTMLOjpAccordionElement extends Components.OjpAccordion, HTMLStencilElement {
    }
    var HTMLOjpAccordionElement: {
        prototype: HTMLOjpAccordionElement;
        new (): HTMLOjpAccordionElement;
    };
    interface HTMLOjpAccordionItemElement extends Components.OjpAccordionItem, HTMLStencilElement {
    }
    var HTMLOjpAccordionItemElement: {
        prototype: HTMLOjpAccordionItemElement;
        new (): HTMLOjpAccordionItemElement;
    };
    interface HTMLOjpColElement extends Components.OjpCol, HTMLStencilElement {
    }
    var HTMLOjpColElement: {
        prototype: HTMLOjpColElement;
        new (): HTMLOjpColElement;
    };
    interface HTMLOjpImageElement extends Components.OjpImage, HTMLStencilElement {
    }
    var HTMLOjpImageElement: {
        prototype: HTMLOjpImageElement;
        new (): HTMLOjpImageElement;
    };
    interface HTMLOjpImageSourceElement extends Components.OjpImageSource, HTMLStencilElement {
    }
    var HTMLOjpImageSourceElement: {
        prototype: HTMLOjpImageSourceElement;
        new (): HTMLOjpImageSourceElement;
    };
    interface HTMLOjpListboxElement extends Components.OjpListbox, HTMLStencilElement {
    }
    var HTMLOjpListboxElement: {
        prototype: HTMLOjpListboxElement;
        new (): HTMLOjpListboxElement;
    };
    interface HTMLOjpModalElement extends Components.OjpModal, HTMLStencilElement {
    }
    var HTMLOjpModalElement: {
        prototype: HTMLOjpModalElement;
        new (): HTMLOjpModalElement;
    };
    interface HTMLOjpRowElement extends Components.OjpRow, HTMLStencilElement {
    }
    var HTMLOjpRowElement: {
        prototype: HTMLOjpRowElement;
        new (): HTMLOjpRowElement;
    };
    interface HTMLElementTagNameMap {
        "ojp-accordion": HTMLOjpAccordionElement;
        "ojp-accordion-item": HTMLOjpAccordionItemElement;
        "ojp-col": HTMLOjpColElement;
        "ojp-image": HTMLOjpImageElement;
        "ojp-image-source": HTMLOjpImageSourceElement;
        "ojp-listbox": HTMLOjpListboxElement;
        "ojp-modal": HTMLOjpModalElement;
        "ojp-row": HTMLOjpRowElement;
    }
}
declare namespace LocalJSX {
    interface OjpAccordion {
        /**
          * Allow multiple items to be open at once If set to false, opening one item will auto-close all other items in the accordion Type: boolean
         */
        "allowMultipleItemsOpen"?: boolean;
        "onElementIsInvisibleEvent"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered when the accordion is visible/invisible in the viewport
         */
        "onElementIsVisibleEvent"?: (event: CustomEvent<any>) => void;
    }
    interface OjpAccordionItem {
        /**
          * Optional User-defined anchor id Used so item can be auto-opened with url param Type: string
         */
        "anchorId"?: any;
        /**
          * Index of accordion item from top to bottom Type: number
         */
        "index"?: number;
        /**
          * Triggered when the accordion item is opened or closed
         */
        "onStateChangeEvent"?: (event: CustomEvent<any>) => void;
        /**
          * Accordion item is open or opening (css transition) Type: boolean
         */
        "open"?: boolean;
    }
    interface OjpCol {
        "dspan"?: any;
        "dstart"?: any;
        "mspan"?: any;
        "mstart"?: any;
        "span"?: string;
        "start"?: string;
        "tspan"?: any;
        "tstart"?: any;
    }
    interface OjpImage {
        /**
          * Image alt text Type: string Default: ""
         */
        "alt"?: string;
        /**
          * Image focus/object position Type: see CSS object-position https://developer.mozilla.org/en-US/docs/Web/CSS/object-position Default: null
         */
        "imageFocus"?: string;
        /**
          * Loading type (using browser's native lazy loading) Type: boolean Default: true
         */
        "lazy"?: string;
        "onElementIsInvisibleEvent"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered when the element is visible/invisible in the viewport
         */
        "onElementIsVisibleEvent"?: (event: CustomEvent<any>) => void;
        "onImageFailedToLoadEvent"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered when the image loaded/failed to load
         */
        "onImageLoadedEvent"?: (event: CustomEvent<any>) => void;
        /**
          * Triggered when the current image source changes Note: this event is not emitted when the image is loaded for the first time Emits the previous source and the new source
         */
        "onImageSourceChangedEvent"?: (event: CustomEvent<any>) => void;
        /**
          * Image aspect ratio Type: see CSS aspect-ratio https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio Default: null
         */
        "ratio"?: string;
        /**
          * Source tags Type: string array of objects Default: [] Example: sources='[           {             "media":"(max-width: 599px)",             "srcset":"../../assets/small_700x600.png"           },           {             "media":"(min-width: 600px) and (max-width: 1000px)",             "srcset":"../../assets/medium_1000x400.png"           }         ]'
         */
        "sources"?: string;
        /**
          * Image src Type: string Required: true Default: null
         */
        "src"?: string;
    }
    interface OjpImageSource {
        /**
          * Media query Type: string Example: "(min-width: 600px)"
         */
        "media"?: string;
        /**
          * Image src Type: string Example: https://www.example.com/image.jpg
         */
        "srcset"?: string;
    }
    interface OjpListbox {
        "activeSelectionIndex"?: number;
        "onItemSelected"?: Function;
        "open"?: boolean;
    }
    interface OjpModal {
        /**
          * Modal's close button is inside or outside the modal panel Type: boolean
         */
        "closebuttonoutside"?: boolean;
        /**
          * Modal is open or opening (css transition) Type: boolean
         */
        "open"?: boolean;
    }
    interface OjpRow {
        "align"?: string;
        "cols"?: string;
        "dcols"?: any;
        "fullbleed"?: boolean;
        "justify"?: string;
        "mcols"?: any;
        "tcols"?: any;
    }
    interface IntrinsicElements {
        "ojp-accordion": OjpAccordion;
        "ojp-accordion-item": OjpAccordionItem;
        "ojp-col": OjpCol;
        "ojp-image": OjpImage;
        "ojp-image-source": OjpImageSource;
        "ojp-listbox": OjpListbox;
        "ojp-modal": OjpModal;
        "ojp-row": OjpRow;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ojp-accordion": LocalJSX.OjpAccordion & JSXBase.HTMLAttributes<HTMLOjpAccordionElement>;
            "ojp-accordion-item": LocalJSX.OjpAccordionItem & JSXBase.HTMLAttributes<HTMLOjpAccordionItemElement>;
            "ojp-col": LocalJSX.OjpCol & JSXBase.HTMLAttributes<HTMLOjpColElement>;
            "ojp-image": LocalJSX.OjpImage & JSXBase.HTMLAttributes<HTMLOjpImageElement>;
            "ojp-image-source": LocalJSX.OjpImageSource & JSXBase.HTMLAttributes<HTMLOjpImageSourceElement>;
            "ojp-listbox": LocalJSX.OjpListbox & JSXBase.HTMLAttributes<HTMLOjpListboxElement>;
            "ojp-modal": LocalJSX.OjpModal & JSXBase.HTMLAttributes<HTMLOjpModalElement>;
            "ojp-row": LocalJSX.OjpRow & JSXBase.HTMLAttributes<HTMLOjpRowElement>;
        }
    }
}
