@import '../../global/breakpoints';

// Encapsulate component style here as children of :host
:host {

  /**
   PUBLIC CSS VALUES - can be overwritten by end user
   likely to be persistent across a project and/or
   easier to set as css vars so they can use Utopia
   */

  /**
   * @prop --ojp-image--max-width: The max-width property of the img. Defaults to `max-content`;
   */
  --ojp-image--max-width: 100%;

  /**
   * @prop --ojp-image--object-fit: The object-fit property of the img. Defaults to `cover`;
   */
  --ojp-image--object-fit: cover;

  /**
   * @prop --ojp-image--width: The width property of the img. Defaults to `100%`;
   */
  --ojp-image--width: auto;

  /**
   * @prop --ojp-image--display: The display property of the img. Defaults to `block`;
   */
  --ojp-image--display: block;

  /**
   * @prop --ojp-image--breakpoint--mobile: Minimum breakpoint for mobile screens; Defaults to global breakpoints (see README at root)
   */
  --ojp-image--breakpoint--mobile: #{$breakpoint--mobile};

  /**
   * @prop --ojp-image--breakpoint--tablet: Minimum breakpoint for tablet screens; Defaults to global breakpoints (see README at root)
   */
  --ojp-image--breakpoint--tablet: #{$breakpoint--tablet};

  /**
   * @prop --ojp-image--breakpoint--desktop: Minimum breakpoint for desktop screens; Defaults to global breakpoints (see README at root)
   */
  --ojp-image--breakpoint--desktop: #{$breakpoint--desktop};

  /*
  This may not always be the case, but in this component
  we want to inherit all of the :host's properties
  so that a consumer of the library can style the
  component by using ojp-image {} on their stylesheet.
   */
  & > img {
    all: inherit;

  }

  img {
    display: var(--ojp-image--display, block);
    max-width: var(--ojp-image--max-width, 100%);
    object-fit: var(--ojp-image--object-fit, cover);
    width: var(--ojp-image--width, 100%);
  }
}
