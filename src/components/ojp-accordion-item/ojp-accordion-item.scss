
:host {

  /**
    * Component css variables are commented but NOT DEFINED here. They are defined in
    * the component's global scss file (e.g. src/global/components/_ojp-image.scss)
    * so that they can be used by other components and use globally set breakpoints.
    *
    **** NOTE: The @prop comments are necessary here because they will be picked up
    **** by Stencil's docs auto-generator and output to the component's docs at
    **** docs/components/<component-name>/readme.md
    ****
    **** Any comment changes here should be duplicated into the component's global scss file
    **** (e.g. src/global/components/_ojp-image.scss)
   */

  /**
   * @prop --ojp-accordion-item--padding-inline: L/R padding on accordion item (header and panel). Defaults to `--space-s-m`
  */

  /**
    * @prop --ojp-accordion-item--header-padding-block: Top/bottom padding on accordion item header. Defaults to `--space-xs-s`
   */

  /**
    * @prop --ojp-accordion-item--panel-padding-block: Top/bottom padding on accordion item panel. Defaults to `--space-2xs-xs`
   */

  /**
    * @prop --ojp-accordion-item--hover-opacity: Opacity of header on hover. Defaults to `0.5`
   */

  /**
    * @prop --ojp-accordion-item--animation-speed: Animation speed of accordion item toggle (panel height, opacity AND icon rotate). Defaults to `0.35s`
   */

  /**
   * @prop --ojp-accordion-item--icon-width: Width of caret icon. Defaults to `--space-s-m`;
  */

  /**
   * @prop --ojp-accordion-item--separator-line-width: Stroke width of line separating each accordion item. Defaults to `1px` (`2px` on tablet up)
  */

  /**
   * @prop --ojp-accordion-item--separator-line-color: Stroke color of line separating each accordion item. Defaults to `#BABABA`
  */

  /**
   * @prop --ojp-accordion-item--icon-stroke-width: Stroke width of svg caret icon. Defaults to `3px`
  */

  /**
   * @prop --ojp-accordion-item--max-content-width: Max width of header content AND panel content. Defaults to `100%` (`75%` on desktop up)
  */


  border-bottom: var(--ojp-accordion-item--separator-line-width) solid var(--ojp-accordion-item--separator-line-color);
  display: block;
  padding-top: var(--ojp-accordion-item--header-padding-block);
  padding-bottom: var(--ojp-accordion-item--header-padding-block);
  text-decoration: none;
}

.ojp-accordion-item__header-wrapper {
  color: currentColor;
  display: block;
  height: min-content;
  margin: 0;
  padding-left: var(--ojp-accordion-item--padding-inline);
  padding-right: var(--ojp-accordion-item--padding-inline);
  position: relative;
  text-align: left;
  text-decoration: none;

  &:hover ::slotted( [slot="header"]),
  &:hover ::slotted( [slot="icon"]),
  &:hover .ojp-accordion-item__header__icon {
    cursor: pointer;
    opacity: var(--ojp-accordion-item--hover-opacity);
  }
}

.ojp-accordion-item__header {
  align-items: center;
  column-gap: var(--ojp-accordion-item--padding-inline);
  display: flex;
  justify-content: space-between;
  opacity: 1;
}

::slotted( [slot="header"]) {
  max-width: var(--ojp-accordion-item--max-content-width);
}

// Opacity transition for hover effect
::slotted( [slot="header"]), .ojp-accordion-item__header__icon {
  transition: opacity .25s ease;
}

// Caret
.ojp-accordion-item__header__icon-wrapper {
  flex-shrink: 0;
  width: var(--ojp-accordion-item--icon-width);
}

.ojp-accordion-item__header__icon {
  height: 1px;
  overflow: visible;
  padding-bottom: 55%;
  transform: rotate(180deg);
  transition: transform var(--ojp-accordion-item--animation-speed) ease, opacity .5s ease;
  width: 100%;

  path {
    stroke-width: var(--ojp-accordion-item--icon-stroke-width);
  }

}

// Panel
.ojp-accordion-item__panel {
  display: grid;
  grid-template-rows: 0fr;
  opacity: 0;
  overflow: hidden;
  padding-left: var(--ojp-accordion-item--padding-inline);
  padding-right: var(--ojp-accordion-item--padding-inline);
  transition: visibility 0s linear,
  grid-template-rows var(--ojp-accordion-item--animation-speed) ease,
  opacity var(--ojp-accordion-item--animation-speed) ease;
}


::slotted( [slot="panel"] ) {
  max-width: var(--ojp-accordion-item--max-content-width);
  overflow: hidden;
  padding-top: var(--ojp-accordion-item--panel-padding-block);
  padding-bottom: var(--ojp-accordion-item--panel-padding-block);
}

// Open state
:host(.is-open) {

  // Rotate icon
  .ojp-accordion-item__header__icon {
    transform: rotate(0deg);
  }

  // Panel opacity
  .ojp-accordion-item__panel {
    grid-template-rows: 1fr;
    opacity: 1;
  }
}

